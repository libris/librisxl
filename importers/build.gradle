apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'war'
apply from: '../gretty.plugin'


loadConfiguration()
def loadConfiguration() {
    ext {
        try {
            environment = env
        } catch (MissingPropertyException mpe) {
            environment = "dev"
        }
    }
    def encoding = hasProperty('file.encoding') ? file.encoding : 'UTF-8'
    System.setProperty 'file.encoding', encoding
    System.setProperty 'whelk.environment', environment
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "whelk.importer.ImporterMain"

def getGitVersion() {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def versionNumber = getGitVersion()

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    maven { url "https://jitpack.io/" }
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {
    def groovyVersion = GroovySystem.getVersion()

    // LIBRISXL modules
    compile(project(':whelk-core'))

    // Common tools
    providedCompile 'javax.servlet:servlet-api:2.5'
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'com.damnhandy:handy-uri-templates:2.0.4'
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    // Integration
    compile 'mysql:mysql-connector-java:5.1.33'
    compile 'org.codehaus.gpars:gpars:1.2.1'

    // metrics
    compile 'io.prometheus:simpleclient:0.0.21'
    compile 'io.prometheus:simpleclient_servlet:0.0.21'

    // Logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

// Include dependent libraries in archive.
jar {
    manifest {
        attributes "Main-Class": "whelk.importer.ImporterMain"
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : project.zipTree(it).matching {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA','build','.gradle/**','build.gradle','gradle','gradlew','gradlew.bat','test'
            }
        }
    }

}



configurations {
    executableWarDeps
}

project.afterEvaluate {
    war {
        archivesBaseName = "vcopyImporter"

        from {
            configurations.executableWarDeps.collect {
                //it.isDirectory() ? it : project.zipTree(it)
                it.isDirectory() ? it : project.zipTree(it).matching {
                    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
                }
            }
        }

        def manifestClasspath = configurations.compile.collect {
            "/WEB-INF/lib/${it.getName()}"
        }.join(',')

        manifest {
            attributes 'Implementation-Title': 'Standalone Whelk Importer',
                    'Implementation-Version': versionNumber,
                    'Class-Path': manifestClasspath
        }
    }
}

task(doRun, dependsOn: "classes", type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "whelk.importer.ImporterMain"
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties"),
        'xl.mysql.properties' : System.getProperty("xl.mysql.properties")
    )
    minHeapSize = "1g"
    maxHeapSize = "4g"
    args(System.getProperty("args", "").split() as String[])
}

gretty {
    httpPort = 8181
    contextPath = '/'
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties"),
        'xl.mysql.properties' : System.getProperty("xl.mysql.properties")
    )
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
    description "Launch a Groovy Console"
    classpath = sourceSets.main.runtimeClasspath
    main = 'groovy.ui.Console'
}
