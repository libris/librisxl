apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'jacoco'

def mainClassName = "whelk.RestServer"

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

test.testLogging {
    showStandardStreams = true
    exceptionFormat = "full"
}

jacoco {
    toolVersion = "$jacocoVersion"
    reportsDirectory = file("$buildDir/coverage_report")
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.destination file("${buildDir}/coverage_report/html")
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {
    // XL
    implementation(project(':whelk-core'))
    implementation(project(':server-common'))

    // Groovy
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-dateutil:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-xml:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy:${groovyVersion}"

    // Servlet
    api "jakarta.servlet:jakarta.servlet-api:${servletApiVersion}"
    implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
    implementation "org.eclipse.jetty:jetty-rewrite:${jettyVersion}"
    implementation "org.eclipse.jetty.ee8:jetty-ee8-servlet:${jettyVersion}"
    implementation 'com.thetransactioncompany:cors-filter:2.1.2'

    // Common tools
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.httpcomponents:httpclient:${httpComponentsClientVersion}"
    implementation "org.apache.httpcomponents:httpcore:${httpComponentsCoreVersion}"
    implementation 'commons-cli:commons-cli:1.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    implementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    implementation 'xml-apis:xml-apis:1.4.01'

    // metrics
    implementation "io.prometheus:simpleclient:${prometheusVersion}"
    implementation "io.prometheus:simpleclient_servlet:${prometheusVersion}"

    // Logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"

    // profiling and test
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation 'cglib:cglib-nodep:3.1'
}

jar {
    dependsOn ':server-common:jar'

    manifest {
        attributes "Main-Class": mainClassName,
                // log4j uses multi-release to ship different stack walking implementations for different java
                // versions. Since we repackage everything as a fat jar, that jar must also be multi-release.
                "Multi-Release": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : project.zipTree(it).matching {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA','build','.gradle/**','build.gradle','gradle','gradlew','gradlew.bat','test'
            }
        }
    }
}

task(appRun, dependsOn: "classes", type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = mainClassName
    minHeapSize = "1g"
    maxHeapSize = "4g"
    systemProperties(
            'xl.secret.properties': System.getProperty("xl.secret.properties"),
            'xl.logRoot': System.getProperty("xl.logRoot", "./logs"),
            'xl.http.port': System.getProperty("xl.http.port", "8180")
    )
    args(System.getProperty("args", "").split() as String[])

    debugOptions {
        enabled = true
        port = 5005
        server = true
        suspend = false
    }
}