apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jacoco'
apply from: '../gretty.plugin'


def getGitVersion() {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def version = getGitVersion()

archivesBaseName = "whelk"

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test {
    systemProperty 'xl.secret.properties', '../secret.properties'
}

test {
    systemProperty 'xl.secret.properties', '../secret.properties'
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/coverage_report")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/coverage_report/html")
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
}

configurations {
    executableWarDeps
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {

    def groovyVersion=GroovySystem.getVersion()
    def jettyVersion = "9.4.20.v20190813"

    // KB libs
    compile(project(':whelk-core'))

    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile "org.codehaus.groovy:groovy-dateutil:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    // Integration
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile 'com.vividsolutions:jts:1.13'
    /* Not needed?
    compile 'com.thoughtworks.paranamer:paranamer:2.7'
    compile 'asm:asm:3.3.1'
    */
    // Standalone
    compile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
    // Servlet dependencies
    compile 'com.thetransactioncompany:cors-filter:2.1.2'
    providedCompile 'javax.servlet:javax.servlet-api:3.0.0'

    // metrics
    compile 'io.prometheus:simpleclient:0.0.21'
    compile 'io.prometheus:simpleclient_servlet:0.0.21'

    // Logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.2'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'

    // Standalone
    executableWarDeps "org.eclipse.jetty:jetty-server:${jettyVersion}"
    executableWarDeps "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    executableWarDeps "org.codehaus.groovy:groovy-all:${groovyVersion}"
    executableWarDeps 'commons-cli:commons-cli:1.2'
}

project.afterEvaluate {
    war {
        baseName = "whelk"

        from {
            configurations.executableWarDeps.collect {
                it.isDirectory() ? it : project.zipTree(it).matching {
                    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
                }
            }
        }
        from "$buildDir/classes/main"

        def manifestClasspath = configurations.compile.collect { "/WEB-INF/lib/${it.getName()}" }.join(',') 

        manifest {
            attributes 'Implementation-Title': 'Standalone Whelk',
            'Implementation-Version': version,
            'Main-Class': 'whelk.component.support.JettyServer',
            'Class-Path': manifestClasspath
        }
    }
}

gretty {
    jacocoEnabled false // https://github.com/akhikhl/gretty/issues/425
    httpPort = 8180
    contextPath = '/'
    systemProperties 'xl.secret.properties': System.getProperty("xl.secret.properties")
    afterEvaluate {
        appRunDebug {
            debugPort = 5005
            debugSuspend = false
        }
    }
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}
