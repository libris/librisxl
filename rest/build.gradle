apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jacoco'
apply from: '../gretty.plugin'

def getGitVersion() {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def version = getGitVersion()

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

test.testLogging {
    showStandardStreams = true
    exceptionFormat = "full"
}

jacoco {
    toolVersion = "$jacocoVersion"
    reportsDirectory = file("$buildDir/coverage_report")
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.destination file("${buildDir}/coverage_report/html")
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
}

configurations {
    executableWarDeps
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {
    // KB libs
    implementation(project(':whelk-core'))

    // Common tools
    implementation "org.apache.groovy:groovy-all:${groovyVersion}"
    implementation "org.apache.groovy:groovy-dateutil:${groovyVersion}"
    implementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    implementation 'commons-io:commons-io:2.11.0'
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.httpcomponents:httpclient:${httpComponentsClientVersion}"
    implementation "org.apache.httpcomponents:httpcore:${httpComponentsCoreVersion}"
    
    // Standalone
    implementation "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
    // Servlet dependencies
    implementation 'com.thetransactioncompany:cors-filter:2.1.2'
    providedCompile 'javax.servlet:javax.servlet-api:3.0.0'

    // metrics
    implementation "io.prometheus:simpleclient:${prometheusVersion}"
    implementation "io.prometheus:simpleclient_servlet:${prometheusVersion}"

    // Logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"

    // profiling and test
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation 'cglib:cglib-nodep:3.1'

    // Standalone
    executableWarDeps "org.eclipse.jetty:jetty-server:${jettyVersion}"
    executableWarDeps "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    executableWarDeps "org.apache.groovy:groovy-all:${groovyVersion}"
    executableWarDeps 'commons-cli:commons-cli:1.2'
    implementation "org.apache.groovy:groovy-xml:${groovyVersion}"
    implementation "org.apache.groovy:groovy:${groovyVersion}"
    implementation 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    implementation 'xml-apis:xml-apis:1.4.01'
}

project.afterEvaluate {
    war {
        archiveBaseName = "whelk"

        from {
            configurations.executableWarDeps.collect {
                it.isDirectory() ? it : project.zipTree(it).matching {
                    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
                }
            }
        }
        from "$buildDir/classes/main"

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        def manifestClasspath = configurations.runtimeClasspath.collect { "/WEB-INF/lib/${it.getName()}" }.join(',')

        manifest {
            attributes 'Implementation-Title': 'Standalone Whelk',
            'Implementation-Version': version,
            'Main-Class': 'whelk.component.support.JettyServer',
            'Class-Path': manifestClasspath
        }
    }
}

gretty {
    httpPort = 8180
    contextPath = '/'
    systemProperties = ['xl.secret.properties': System.getProperty("xl.secret.properties")]
    afterEvaluate {
        appRunDebug {
            debugPort = 5005
            debugSuspend = false
        }
    }

    scanInterval = 0
    interactiveMode = 'rebuildAndRestartOnKeyPress'
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'groovy.ui.Console'
}
