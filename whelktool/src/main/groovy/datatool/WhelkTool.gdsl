/**
 * GroovyDSL script for whelktool
 * 
 * i.e. IntelliJ autocompletion for stuff added to whelktool script context via javax.script.Bindings
 * 
 * https://youtrack.jetbrains.com/articles/GROOVY-A-15796912
 */

package datatool

String ITEM = 'whelk.datatool.DocumentItem'
String DC = "Closure<$ITEM>"

def ctx = context(scope:scriptScope(), pathRegexp:'.*whelktool/scripts/.*')

contributor(ctx) {
    property name:"scriptDir", type:String
    property name:"baseUri", type:URI
    method name:"asList", params:['':Object], type:List
    method name:"create", params:['data':Map], type:ITEM
    method name:"findCanonicalId", params:['id':String], type:String
    // Seems like the only way to have optional arguments is to list all combinations
    method name:"getAtPath", params:['item':Object, 'path':Iterable, 'defaultTo':Object], type:Object
    method name:"getAtPath", params:['item':Object, 'path':Iterable], type:Object
    method name:"getReportWriter", params:['reportName':String], type:PrintWriter
    method name:"getWhelk", type:'whelk.Whelk'
    method name:"incrementStats", params:['category':String, 'name':Object, 'example':Object]
    method name:"incrementStats", params:['category':String, 'name':Object]
    method name:"isInstanceOf", params:['entity':Map, 'baseType':String], type:boolean 
    method name:"load", params:['id':String], type:Map
    method name:"queryDocs", params:['parameters':Map<String, List<String>>], type:Iterable<Map>
    method name:"queryIds", params:['parameters':Map<String, List<String>>], type:Iterable<String>
    method name:"script", params:['scriptPath':String], type:Closure
    method name:"selectByCollection", params:['collection':String, 'process':DC, 'batchSize':int, 'silent':boolean], type:void
    method name:"selectByCollection", params:['collection':String, 'process':DC, 'batchSize':int], type:void
    method name:"selectByCollection", params:['collection':String, 'process':DC, 'silent':boolean], type:void
    method name:"selectByCollection", params:['collection':String, 'process':DC], type:void
    method name:"selectByIds", params:['ids':Collection<String>, 'process':DC, 'batchSize':int, 'silent':boolean], type:void
    method name:"selectByIds", params:['ids':Collection<String>, 'process':DC, 'batchSize':int], type:void
    method name:"selectByIds", params:['ids':Collection<String>, 'process':DC, 'silent':boolean], type:void
    method name:"selectByIds", params:['ids':Collection<String>, 'process':DC], type:void
    method name:"selectBySqlWhere", params:['whereClause':String, 'batchSize':int, 'silent':boolean, 'process':DC], type:void
    method name:"selectBySqlWhere", params:['whereClause':String, 'batchSize':int, 'process':DC], type:void
    method name:"selectBySqlWhere", params:['whereClause':String, 'silent':boolean, 'process':DC], type:void
    method name:"selectBySqlWhere", params:['whereClause':String, 'process':DC], type:void
    method name:"selectBySqlWhere",
            params:[params:[
                    parameter(name:'silent', type:Boolean, doc:''),
                    parameter(name:'batchSize', type:int)], 
                    'whereClause':String, 'process':DC],
            type:void
    method name:"selectFromIterable", params:['docs':Iterable, 'process':DC]
}
