apply plugin: 'application'
apply plugin: 'groovy'

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {

    // Logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"

    // XL dependencies
    implementation(project(':whelk-core'))
    implementation "io.prometheus:simpleclient:${prometheusVersion}"
    implementation "io.prometheus:simpleclient_pushgateway:${prometheusVersion}"

    testImplementation "org.spockframework:spock-core:${spockVersion}"
}

test {
    useJUnitPlatform()
}

test.testLogging {
    showStandardStreams = true
    exceptionFormat = "full"
}

mainClassName = 'whelk.importer.Main'

jar {
    dependsOn ':whelk-core:jar'
    manifest {
        attributes 'Implementation-Title':'Libris XL metadata importer',
                'Implementation-Version': '1.0',
                'Main-class': mainClassName,
                // log4j uses multi-release to ship different stack walking implementations for different java
                // versions. Since we repackage everything as a fat jar, that jar must also be multi-release.
                "Multi-Release": true
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it) }
    }
}
