apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'war'
apply from: '../gretty.plugin'


loadConfiguration()

def loadConfiguration() {
    ext {
        try {
            environment = env
        } catch (MissingPropertyException mpe) {
            environment = "dev"
        }
    }
    def encoding = hasProperty('file.encoding') ? file.encoding : 'UTF-8'
    System.setProperty 'file.encoding', encoding
    System.setProperty 'whelk.environment', environment
}


def getGitVersion() {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def versionNumber = getGitVersion()

archivesBaseName = "oaipmhharvester"

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'whelk.component.support.JettyServer'

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    maven { url "https://jitpack.io/" }

}

configurations {
    executableWarDeps
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'junit:junit:3.8.2'
    }
}

dependencies {

    def groovyVersion = GroovySystem.getVersion()
    def jettyVersion = "9.4.20.v20190813"

    compile(project(':whelk-core'))

    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile "org.codehaus.groovy:groovy-dateutil:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    // Integration
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile 'com.vividsolutions:jts:1.13'
    compile 'org.picocontainer:picocontainer:2.15'
    /* Not needed?
    compile 'com.thoughtworks.paranamer:paranamer:2.7'
    compile 'asm:asm:3.3.1'
    */
    // Standalone
    compile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
    // Servlet dependencies
    compile 'com.thetransactioncompany:cors-filter:2.1.2'
    providedCompile 'javax.servlet:servlet-api:2.5'

    // Logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
    
    // Standalone
    executableWarDeps "org.eclipse.jetty:jetty-server:${jettyVersion}"
    executableWarDeps "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    executableWarDeps "org.codehaus.groovy:groovy-all:${groovyVersion}"
    executableWarDeps 'commons-cli:commons-cli:1.2'
}

project.afterEvaluate {
    war {
        baseName = archivesBaseName

        from {
            configurations.executableWarDeps.collect {
                it.isDirectory() ? it : project.zipTree(it).matching {
                    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
                }
            }
        }
        from "$buildDir/classes/main"

        def manifestClasspath = configurations.compile.collect {
            "/WEB-INF/lib/${it.getName()}"
        }.join(',')

        manifest {
            attributes 'Implementation-Title': 'Standalone Whelk Harvester',
                    'Implementation-Version': versionNumber,
                    'Main-Class': 'whelk.component.support.JettyServer',
                    'Class-Path': manifestClasspath
        }
    }
}

gretty {
    contextPath = archivesBaseName
    httpPort = 8180
    contextPath = '/'
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties"),
        'xl.mysql.properties' : System.getProperty("xl.mysql.properties")
    )
}

task(console, dependsOn: 'classes', type: JavaExec) {
    description "Launch a Groovy Console"
    classpath = sourceSets.main.runtimeClasspath
    main = 'groovy.ui.Console'
}
