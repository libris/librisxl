package whelk.util

import com.ibm.icu.text.Transliterator
import groovy.yaml.*

import static whelk.util.Unicode.normalize

/**
 * Convert mappings from LOC's ScriptShifter in homegrown YAML format to ICU transform rules
 * https://github.com/lcnetdev/transliterator/
 */
class ScriptShifterShifter {
    
    static final String BASE = 'https://raw.githubusercontent.com/lcnetdev/transliterator/main/scriptshifter/tables/data/'
    
    static final Map tables = [
            'armenian'               : 'hy-Latn-t-hy-Armn-m0-alaloc',
            'azerbaijani'            : 'az-Latn-t-az-Cyrl-m0-alaloc',
            'chinese'                : 'zh-Latn-t-zh-Hani-m0-alaloc',
            'church_slavonic'        : 'chu-Latn-t-chu-Cyrs-m0-alaloc',
            'ethiopic'               : 'am-Latn-t-am-Ethi-m0-alaloc',
            'georgian'               : 'ka-Latn-t-ka-m0-alaloc',
            'hindi'                  : 'hi-Latn-t-hi-Deva-m0-alaloc',
            'kyrgyz'                 : 'kir-Latn-t-kir-Cyrl-m0-alaloc',
            'mongolian_mongol_bichig': 'mn-Latn-t-mn-Mong-m0-alaloc',
            'tajik'                  : 'tg-Latn-t-tg-Cyrl-m0-alaloc',
            'tatar'                  : 'tt-Latn-t-tt-Cyrl-m0-alaloc',
            'turkmen'                : 'tk-Latn-t-tk-Cyrl-m0-alaloc',
            'uzbek'                  : 'uz-Latn-t-uz-Cyrl-m0-alaloc',

            /* "Multi-purpose transliteration for non-Slavic Cyrillic scripts: Abaza, Abkhaz, Adygei, Aisor, Altai, 
            Avar, Azeri, Balkar, Bashkir, Buryat, Chechen, Chukchi, Chuvash, Dargwa, Dungan, Eskimo, Even, Evenki, 
            Gagauz, Ingush, Inuit, Kabardian, Kalmyk, Karachay, Karachay-Balkar, Karakalpak, Karelian, Khakass, 
            Khanty, Komi, Komi-Permyak, Koryak, Kumyk, Lak, Lapp, Lezghian, Lithuanian, Mansi, Mari, Moldovan, 
            Molodstov, Mordvin, Nanai, Nenets, Nivkh, Nogai, Ossetic, Permyak, Romanian, Romany, Selkup, Shor, 
            Tabasaran, Tat, Tuva, Udekhe, Udmurt, Yakut." 
            https://github.com/lcnetdev/transliterator/blob/main/scriptshifter/tables/data/index.yml
            */
            'asian_cyrillic'         : 'und-Latn-t-und-Cyrl-m0-alaloc',
    ]

    static final List SKIP_PARENTS = ['_ignore_base']
    
    static void run(String outputPath) {
        tables.each { name, id ->
            def table = load(name)
            
            def s = new StringBuilder()
            .append("# *** This file was automatically generated by ${ScriptShifterShifter.class.getName()} ***\n")
            .append("# Source: ${url(name)}\n")
            .append("# ICU transform rules\n")
            .append("\n")
            .append("# ${id}\n\n")
            
            // Sort on key length so that rules don't shadow each other
            s.append('# script_to_roman\n')
            Map map = table.script_to_roman.map
            map = map.collectEntries { k, v -> [(normalize(k)) : normalize(v ?: '')] }
            map.sort { a, b -> b.key.length() <=> a.key.length() }.each { k, v->
                s.append("${quote(k)} > ${quote(v)} ;\n")
            }
            
            s.append('# roman_to_script\n')
            map = table.roman_to_script?.map ?: [:]
            map = map.collectEntries { k, v -> [(normalize(k)) : normalize(v ?: '')] }
            map.sort { a, b -> b.key.length() <=> a.key.length() }.each { k, v->
                s.append("${quote(v)} < ${quote(k)} ;\n")
            }
            
            String rules = s.toString()
            testCompile(id, rules)
            
            String file = "${id}.txt"
            new File(outputPath, file).write(rules, "UTF-8")
            println(file)
        }
    }

    static String url(String name) {
        "${BASE + name}.yml"
    }

    static Map load(String name) {
        Map table = new YamlSlurper().parse(new URL(url(name)).openStream())

        def parents = asList(table.general?.inherits ?: table.general?.parents ?: [])
        parents.findAll{ it !in SKIP_PARENTS }.each {
            def parent = load(it)
            table.script_to_roman.map = parent.script_to_roman.map + table.script_to_roman.map
            table.roman_to_script.map = parent.roman_to_script.map + table.roman_to_script.map
        }

        return table
    }
    
    static String quote(String s) {
        // TODO...
        "'" == s ? "\\'\\" : "'$s'"
    }
    
    static void testCompile(String id, String rules) {
        try {
            Transliterator.createFromRules(id, rules, Transliterator.REVERSE)
        }
        catch (Exception e) {
            System.err.println("Warning: could not create rules for ${id}: $e")
            e.printStackTrace(System.err)
        }
    }

    static List asList(Object o) {
        return o in List ? o : [o]
    }
    
    static void main(String[] args) {
        run('whelk-core/src/main/resources/romanizer/loc/')
    }
}
