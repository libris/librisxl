apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'

archivesBaseName = "xlcore"

group = 'com.github.libris'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
    integTest {
        groovy.srcDir 'src/integTest/groovy/'
        resources.srcDir 'src/integTest/resources'
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/coverage_report")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/coverage_report/html")
    }
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    maven { url "https://jitpack.io/" }
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {
    def groovyVersion=GroovySystem.getVersion()

    // KB tools
    compile files('lib/jmarctools.jar')
    compile files('lib/isbntools-1.3.jar')
    compile files('lib/oaij-0.1.jar')

    // Dependencies inherited from classic libris, due to profile handling
    compile group: 'com.ibm.icu', name: 'icu4j', version: '4.8.1.1'
    compile group: 'org.dspace', name: 'xoai', version: '3.2.10'
    compile group: 'xml-apis', name: 'xml-apis', version: '1.4.01'

    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'com.damnhandy:handy-uri-templates:2.0.4'
    compile 'com.zaxxer:HikariCP:3.4.1'
    compile 'org.apache.jena:apache-jena-libs:3.0.1'
    compile group: 'xerces', name: 'xercesImpl', version: '2.11.0' //KP

    // Logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    // Caching
    compile 'org.apache.commons:commons-collections4:4.1'

    // Integration

    compile "org.apache.commons:commons-lang3:3.3.2"
    compile 'com.vividsolutions:jts:1.13'
    compile 'org.postgresql:postgresql:9.4.1212.jre7'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'

    // Integration Testing
    integTestCompile sourceSets.main.output
    integTestCompile sourceSets.test.output

    integTestCompile configurations.compile
    integTestCompile configurations.testCompile

    integTestRuntime configurations.runtime
    integTestRuntime configurations.testRuntime
}

task integTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'
    outputs.upToDateWhen { false }
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    testLogging {
        showStandardStreams true
        exceptionFormat "full"
    }
    binResultsDir = file("$buildDir/integration-test-results/binary/integTest")
    reports {
        html.destination = file("$buildDir/reports/integration-test")
        junitXml.destination = file("$buildDir/integration-test-results")
    }
    mustRunAfter tasks.test
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.marc.MarcFrameCli'
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties")
    )
    args(System.getProperty('args', "").split() as String[])
}

task vocabFromMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Extract a vocabulary from marcframe"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.marc.MarcFrameVocabExtractor'
}

task jsonldToTurtle(dependsOn: 'classes', type: JavaExec) {
    description "Convert a JSON-LD file to Turtle (USAGE: -Dargs='<context> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.JsonLdToTurtle'
    args(System.getProperty('args', "").split() as String[])
}

task dataview(dependsOn: 'classes', type: JavaExec) {
    description "View JSON-LD data (USAGE: -Dargs='<card|chip|embellish|index> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.util.DataViewCli'
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties")
    )
    args(System.getProperty('args', "").split() as String[])
}
