apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'nebula.lint'

group = 'com.github.libris'

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
    integTest {
        groovy.srcDir 'src/integTest/groovy/'
        resources.srcDir 'src/integTest/resources'
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

test.testLogging {
    showStandardStreams = true
    exceptionFormat = "full"
}

jacoco {
    toolVersion = "$jacocoVersion"
    reportsDirectory = layout.buildDirectory.dir("coverage_report")
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("coverage_report/html")
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
}

configurations {
    integTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    integTestImplementation.extendsFrom(testImplementation)
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {
    // KB tools
    api files('lib/jmarctools-1.3.5.jar')
    api files('lib/isbntools-1.3.jar')
    implementation files('lib/oaij-0.1.jar')

    implementation(project(':trld-java'))

    // Dependencies inherited from classic libris, due to profile handling
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '71.1'
    implementation(group: 'org.dspace', name: 'xoai', version: '3.2.10') {
        exclude group: 'org.mockito'
        exclude group: 'org.hamcrest'
        exclude group: 'junit'
        exclude group: 'com.lyncode', module: 'test-support'
        // org.w3c.dom.UserDataHandler scanned from multiple locations: xml-apis, jaxen
        exclude group: 'jaxen', module: 'jaxen'
    }
    implementation group: 'xml-apis', name: 'xml-apis', version: '1.4.01'

    // Common tools
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-prometheus:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation 'com.damnhandy:handy-uri-templates:2.0.4'
    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'commons-codec:commons-codec:1.7'
    implementation 'com.ibm.icu:icu4j:71.1'
    api 'commons-io:commons-io:2.11.0'
    implementation "org.apache.httpcomponents:httpclient:${httpComponentsClientVersion}"
    implementation "org.apache.httpcomponents:httpcore:${httpComponentsCoreVersion}"
    api 'org.apache.jena:apache-jena-libs:3.0.1'
    api "org.codehaus.groovy:groovy-json:${groovyVersion}"
    api "org.codehaus.groovy:groovy-xml:${groovyVersion}"
    api "org.codehaus.groovy:groovy-yaml:${groovyVersion}"
    api "org.codehaus.groovy:groovy:${groovyVersion}"
    api 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    implementation 'xerces:xercesImpl:2.11.0' //KP

    // Logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"

    // Caching
    implementation 'org.apache.commons:commons-collections4:4.1'

    // metrics
    implementation "io.prometheus:simpleclient_guava:${prometheusVersion}"

    // Integration
    api "org.apache.commons:commons-lang3:3.3.2"
    implementation 'org.postgresql:postgresql:42.4.0'

    // profiling and test
    testImplementation "org.spockframework:spock-core:${spockVersion}"

    // Integration Testing
    integTestImplementation sourceSets.main.output
    integTestImplementation sourceSets.test.output
}

task integTest(type: Test) {
    useJUnitPlatform()
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'
    outputs.upToDateWhen { false }
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties")
    )
    testLogging {
        showStandardStreams = true
        exceptionFormat = "full"
    }
    binaryResultsDirectory.set(layout.buildDirectory.dir("integration-test-results/binary/integTest"))
    reports {
        html.outputLocation = layout.buildDirectory.dir("reports/integration-test")
        junitXml.outputLocation = layout.buildDirectory.dir("integration-test-results")
    }
    mustRunAfter tasks.test
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'groovy.ui.Console'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'whelk.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'whelk.converter.marc.MarcFrameCli'
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties")
    )
    args(System.getProperty('args', "").split() as String[])
}

task vocabFromMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Extract a vocabulary from marcframe"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'whelk.converter.marc.MarcFrameVocabExtractor'
}

task dataview(dependsOn: 'classes', type: JavaExec) {
    description "View JSON-LD data (USAGE: -Dargs='<card|chip|embellish|index> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'whelk.util.DataViewCli'
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties")
    )
    args(System.getProperty('args', "").split() as String[])
}

task testRelations(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.integTest.runtimeClasspath
    mainClass = 'Relations'
    systemProperties(
            'xl.secret.properties': System.getProperty("xl.secret.properties")
    )
    args(System.getProperty('args', "").split() as String[])
}
