apply plugin: 'war'
apply from: '../gretty.plugin'

repositories {
    mavenCentral()
}

// Don't blame me for this TRAVESTY. It is a necessity because of the versioning of xml-apis (2.0.2 which gradle otherwise chooses is OLDER (and broken) despite the version.)
configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {
    // XL dependencies
    implementation(project(':whelk-core'))

    // Logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"

    // metrics
    implementation "io.prometheus:simpleclient:${prometheusVersion}"
    implementation "io.prometheus:simpleclient_servlet:${prometheusVersion}"

    // Dependencies inherited from classic libris, due to profile handling
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '4.8.1.1'
    implementation(group: 'org.dspace', name: 'xoai', version: '3.2.10') {
        exclude group: 'org.mockito'
        exclude group: 'org.hamcrest'
        exclude group: 'junit'
        exclude group: 'com.lyncode', module: 'test-support'
        // org.w3c.dom.UserDataHandler scanned from multiple locations: xml-apis, jaxen
        exclude group: 'jaxen', module: 'jaxen'
    }
    implementation group: 'xml-apis', name: 'xml-apis', version: '1.4.01'
    implementation 'org.apache.commons:commons-lang3:3.3.2'
    implementation "org.apache.groovy:groovy:${groovyVersion}"
}

gretty {
    jvmArgs = ['-XX:+UseParallelGC']
    systemProperties = ['xl.secret.properties': System.getProperty("xl.secret.properties")]
    httpPort = 8580
    scanInterval = 0
    afterEvaluate {
        appRunDebug {
            debugPort = 5006
            debugSuspend = false
        }
    }
}

jar {
    dependsOn ':whelk-core:jar'

    // 'Multi-Release': 'true' is needed because log4j2-api is a 'Multi-Release' jar and selects "StackLocator"
    // implementation based on JDK version. If we build our fat jar without 'Multi-Release' it will not find the 
    // JDK9+ version and log a warning to STDOUT (not STDERR...) messing up the output of this program.
    // "WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance."
    manifest {
        attributes "Main-Class": "whelk.export.marc.MarcCliExport", 
                'Multi-Release': 'true' 
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : project.zipTree(it).matching {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA','build','.gradle/**','build.gradle','gradle','gradlew','gradlew.bat','test'
            }
        }
    }
}
